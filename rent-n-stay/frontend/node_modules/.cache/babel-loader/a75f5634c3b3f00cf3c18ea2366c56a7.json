{"ast":null,"code":"import { createWebHistory, createRouter } from \"vue-router\"; // layouts\n\nimport Admin1 from \"@/layouts/Admin_v.vue\";\nimport Auth from \"@/layouts/Auth.vue\"; // views for Admin layout\n\nimport Dashboard1 from \"@/views/admin_/Dashboard.vue\";\nimport Settings from \"@/views/admin_/Settings.vue\";\nimport Tables from \"@/views/admin_/Tables.vue\";\nimport Maps from \"@/views/admin_/Maps.vue\"; // views for Auth layout\n\nimport Login from \"@/views/auth/Login.vue\";\nimport Register from \"@/views/auth/Register.vue\"; // views without layouts\n\nimport Landing from \"@/views/Landing.vue\";\nimport Profile from \"@/views/Profile.vue\";\nimport Home from \"@/views/Index.vue\";\nimport indexTemp from \"@/views/Index_temp.vue\"; //coba\n\nimport Admin from \"@/layouts/Admin.vue\";\nimport Dashboard from \"@/views/admin/Dashboard.vue\";\nimport Client from \"@/views/admin/ManageClient.vue\";\nimport Owner from \"@/views/admin/ManageOwner.vue\";\nimport Place from \"@/views/admin/ManagePlace.vue\";\nimport Address from \"@/views/admin/ManageAddress.vue\";\nimport Facility from \"@/views/admin/ManageFacility.vue\";\nimport Order from \"@/views/admin/ManageOrder.vue\"; // routes\n\nvar router = createRouter({\n  history: createWebHistory(),\n  routes: [{\n    path: \"/admin1\",\n    redirect: \"/admin1/dashboard\",\n    component: Admin1,\n    children: [{\n      path: \"/admin1/dashboard\",\n      component: Dashboard1\n    }, {\n      path: \"/admin1/settings\",\n      component: Settings\n    }, {\n      path: \"/admin1/tables\",\n      component: Tables\n    }, {\n      path: \"/admin1/maps\",\n      component: Maps\n    }]\n  }, {\n    path: \"/admin\",\n    redirect: \"/admin/dashboard\",\n    component: Admin,\n    children: [{\n      path: \"/admin/dashboard\",\n      component: Dashboard\n    }, {\n      path: \"/admin/client\",\n      component: Client\n    }, {\n      path: \"/admin/owner\",\n      component: Owner\n    }, {\n      path: \"/admin/place\",\n      component: Place\n    }, {\n      path: \"/admin/address\",\n      component: Address\n    }, {\n      path: \"/admin/facility\",\n      component: Facility\n    }, {\n      path: \"/admin/Order\",\n      component: Order\n    }],\n    meta: {\n      requiresAuth: false,\n      roles: ['admin']\n    }\n  }, {\n    path: \"/auth\",\n    redirect: \"/auth/login\",\n    component: Auth,\n    children: [{\n      path: \"/auth/login\",\n      component: Login\n    }, {\n      path: \"/auth/register\",\n      component: Register\n    }],\n    requiresAuth: false,\n    meta: {}\n  }, {\n    path: \"/landing\",\n    component: Landing,\n    meta: {\n      requiresAuth: true,\n      roles: ['owner']\n    }\n  }, {\n    path: \"/temp\",\n    component: indexTemp\n  }, {\n    path: \"/profile\",\n    component: Profile,\n    meta: {\n      requiresAuth: true,\n      roles: ['client']\n    }\n  }, {\n    path: \"/\",\n    component: Home\n  }]\n});\nrouter.beforeEach(function (to, from, next) {\n  if (to.matched.some(function (record) {\n    return record.meta.requiresAuth;\n  })) {\n    if (localStorage.getItem('jwt')) {\n      next({\n        path: '/auth/login',\n        params: {\n          nextUrl: to.fullPath\n        }\n      });\n    } else {\n      switch (to.matched.some(function (record) {\n        return record.meta.roles;\n      })) {\n        case 'client':\n          next();\n          break;\n\n        case 'owner':\n          if (localStorage.getItem('role') <= 2) {\n            next();\n          } else {\n            next({\n              component: Home\n            });\n          }\n\n          break;\n\n        case 'admin':\n          if (localStorage.getItem('role') <= 1) {\n            next();\n          } else {\n            next({\n              component: Home\n            });\n          }\n\n          break;\n      }\n    }\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"sources":["D:/Project/temp_rns/frontend/src/routes/routes.js"],"names":["createWebHistory","createRouter","Admin1","Auth","Dashboard1","Settings","Tables","Maps","Login","Register","Landing","Profile","Home","indexTemp","Admin","Dashboard","Client","Owner","Place","Address","Facility","Order","router","history","routes","path","redirect","component","children","meta","requiresAuth","roles","beforeEach","to","from","next","matched","some","record","localStorage","getItem","params","nextUrl","fullPath"],"mappings":"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","sourcesContent":["import { createWebHistory, createRouter } from \"vue-router\";\n\n// layouts\nimport Admin1 from \"@/layouts/Admin_v.vue\";\nimport Auth from \"@/layouts/Auth.vue\";\n\n// views for Admin layout\nimport Dashboard1 from \"@/views/admin_/Dashboard.vue\";\nimport Settings from \"@/views/admin_/Settings.vue\";\nimport Tables from \"@/views/admin_/Tables.vue\";\nimport Maps from \"@/views/admin_/Maps.vue\";\n\n// views for Auth layout\nimport Login from \"@/views/auth/Login.vue\";\nimport Register from \"@/views/auth/Register.vue\";\n\n// views without layouts\nimport Landing from \"@/views/Landing.vue\";\nimport Profile from \"@/views/Profile.vue\";\nimport Home from \"@/views/Index.vue\";\nimport indexTemp from \"@/views/Index_temp.vue\";\n\n//coba\nimport Admin from \"@/layouts/Admin.vue\";\nimport Dashboard from \"@/views/admin/Dashboard.vue\";\nimport Client from \"@/views/admin/ManageClient.vue\";\nimport Owner from \"@/views/admin/ManageOwner.vue\";\nimport Place from \"@/views/admin/ManagePlace.vue\";\nimport Address from \"@/views/admin/ManageAddress.vue\";\nimport Facility from \"@/views/admin/ManageFacility.vue\";\nimport Order from \"@/views/admin/ManageOrder.vue\";\n\n// routes\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes: [{\n            path: \"/admin1\",\n            redirect: \"/admin1/dashboard\",\n            component: Admin1,\n            children: [{\n                    path: \"/admin1/dashboard\",\n                    component: Dashboard1,\n                },\n                {\n                    path: \"/admin1/settings\",\n                    component: Settings,\n                },\n                {\n                    path: \"/admin1/tables\",\n                    component: Tables,\n                },\n                {\n                    path: \"/admin1/maps\",\n                    component: Maps,\n                },\n            ],\n        }, {\n            path: \"/admin\",\n            redirect: \"/admin/dashboard\",\n            component: Admin,\n            children: [{\n                    path: \"/admin/dashboard\",\n                    component: Dashboard,\n                }, {\n                    path: \"/admin/client\",\n                    component: Client,\n                },\n                {\n                    path: \"/admin/owner\",\n                    component: Owner,\n                },\n                {\n                    path: \"/admin/place\",\n                    component: Place,\n                },\n                {\n                    path: \"/admin/address\",\n                    component: Address,\n                },\n                {\n                    path: \"/admin/facility\",\n                    component: Facility,\n                },\n                {\n                    path: \"/admin/Order\",\n                    component: Order,\n                },\n            ],\n            meta: {\n                requiresAuth: false,\n                roles: ['admin']\n            }\n        },\n        {\n            path: \"/auth\",\n            redirect: \"/auth/login\",\n            component: Auth,\n            children: [{\n                    path: \"/auth/login\",\n                    component: Login,\n                },\n                {\n                    path: \"/auth/register\",\n                    component: Register,\n                },\n            ],\n            requiresAuth: false,\n            meta: {\n\n            }\n        },\n        {\n            path: \"/landing\",\n            component: Landing,\n            meta: {\n                requiresAuth: true,\n                roles: ['owner']\n            }\n        },\n        {\n            path: \"/temp\",\n            component: indexTemp,\n        },\n        {\n            path: \"/profile\",\n            component: Profile,\n            meta: {\n                requiresAuth: true,\n                roles: ['client']\n            }\n        },\n        {\n            path: \"/\",\n            component: Home,\n        }\n    ]\n});\n\nrouter.beforeEach((to, from, next) => {\n    if (to.matched.some(record => record.meta.requiresAuth)) {\n        if (localStorage.getItem('jwt')) {\n            next({\n                path: '/auth/login',\n                params: { nextUrl: to.fullPath }\n            })\n        } else {\n            switch (to.matched.some(record => record.meta.roles)) {\n                case 'client':\n                    next();\n                    break;\n                case 'owner':\n                    if (localStorage.getItem('role') <= 2) {\n                        next();\n                    } else {\n                        next({ component: Home });\n                    }\n                    break;\n                case 'admin':\n                    if (localStorage.getItem('role') <= 1) {\n                        next();\n                    } else {\n                        next({ component: Home });\n                    }\n                    break;\n            }\n        }\n    } else {\n        next()\n    }\n})\n\nexport default router;"]},"metadata":{},"sourceType":"module"}